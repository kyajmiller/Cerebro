New Notes file, old Notes file died in the great Profile disappearance of July 2, 2015. RIP.

7/2 Notes:
-Compy profile died (who knows), lost old notes, new notes file now
-Hopefully Mike not too mad about losing old notes, will try to recreate notes by memory but they'll suck
-All notes from 6/12 to 7/1 are gone, pretty bad lol

So what did I do (recreation 6/22-7/1)
6/22
-Learned that unit tests should have their own separate functions, makes it easier to break them up and run one section at a time
-Added arguments to SPRF Class; wrote unit tests to make sure that GPA is passing the correct stuff when making an instance of the SPRF class
-GPA now takes more arguments
-UpdateLogicGroup function now checks for the length of the GPA results array; if more than one GPA value found, LogicGroup is set to 1; default is 0
-Added anti-context checks for GPA; unit tests for this
-Updated GPA regex
-Worked on Majors class

6/23
-Rewrote cleaning class by simplifying the regex <.*?>
-Worked on MapDBtoSPR Class (because I was really bad at understanding what Don-E intended for the class to actually do)
--Decided to go for the long haul, made a class that would connect to the database, pull out the eligibilities and scholarshippackageids,
populate respective lists, loop through eligibilities, clean each one, extract relevant information
and then return the information. It worked well enough! Worked on real world test cases too.

6/24
-Added a function to Majors, getScholarshipPackageRequirementFormat, also unit tests
-Worked on UACollege class, added more context checking
-Updated GPA regex to accept g.p.a
-Read about Flask servers, made a basic Flask server (it doesn't do much though)
-MapDBtoSPR Class now takes a SQL Query so you can specify which table and which lines to pull out instead of having a default grab
-MapDBtoSPR can now parse GPA and Majors

6/25
-Worked more on UAColleges class, updated context checking
-Added functionality to SPRF class (mostly for testing purposes, wanted a function to return a string version of the class so you could see it)
-Ran into a wall when trying to write a unit test for MapDBtoSPR Class, this is when I realized that it's probably not what Don-E wanted me to do lol
-Officially wrote the CleanText class (HTML Worker but better, I think); unit testing
-Updated CleanText functions to use re.DOTALL
-Wrote a new class that's basically a clone of MapDBtoSPR but works by reading in a text file instead of an SQL query; ScanText
-Tested ScanText on ScholarshipTest1.txt, works!
-Set default values of scholarshipPackageId in various parsers to 0
-I learned about default and optional arguments in functions! This is cool.
-Updated GPA context checker to remove 4.0 if finds '4.0 scale'
--For example, if the string is 'must have a 3.5 on a 4.0 scale' it should only return 3.5, not 3.5 and 4.0

6/26
-Ran ScanText on ScholarshipTest2 and ScholarshipTest3, works!
-Can verify that the CleanText Class works as intended, as ScholarshipTest2 was filled with html/xml tags and the cleaner worked perfectly!
-Cleaner still needs to be tested on javascript stuff
-Needed to figure out how to make Majors parser work on lists of related majors
--Example: 'systems, mining, aerospace and civil engineering' needs to return system engineering, mining engineering, aerospace engineering, and civil engineering, while the current system would only return civil engineering
--Solution: tokenize the string, grab previous five words/tokens appearing before 'engineering', concatenate each one of those with 'engineering', scan each new token with Majors parser, add the results
--NLP stuff to the rescue!
--Had to add a line of code to remove 'engineering' from the results if it didn't already exist before this loop, as it was adding it in unnecessarily
-Learned what Don-E actually intended for MapDBtoSPR class to actually do, lol
--Class is supposed to take an attributeId, access the database using a SQL Query created from that attribute Id, returns the proper regular expression from the table
--The table that the SQL Query is accessing has a row with the attributeId, regex, regexHelper, Fast Find value
--Eventually we want this class to take the attribute Id, loop through the Major Parser using the regexes on each row in the database, if a particular regex matches then return the fast find value of the major
--For now though, I will start by writing a class that takes the attribute Id and a test string, calls the database, pulls down the regex and the regexhelpers, and then returns True or False if a match is found
-Removed UpdateLogicGroup from GPA, just added in that functionality to another existing function; unit tests to reflect this

6/29
-Working on Database Helper! (the class that takes attributeID, gets regex, runs regex search, returns TF)
-Added basic functions to return first regex, first regex helper, all regexes, all regex helpers; unit tests
-Wanted to write a function that would allow you to declare whether you wanted the regex or regex helper to return True or False, but it's not working as intended

6/30
-Rewrote the True/False function, everything is working as intended but the True+True condition is broken some how by returning True no matter what, even if not True
-Ended up disabling it because it's annoying me
-Don-E took a look at the function, we decided it was overcomplicated and too long so impossible to pinpoint what exactly was broken, so I had to rewrite the function into a bunch of smaller, separate functions
--Functions called things like useOnlyFirstRegexTrueRegexHelperFalse, which checks to see if the first regex is True and the regex helper is False, and returns True if these conditions are met
--All of these work, which is a sign that smaller functions are just straight up better because things work like they're supposed to; if things aren't overcomplicated you are less likely to make errors
--I still don't know why the original one wasn't working, but okay

7/1
-Time to learn about Django - watch ALL the tutorials!
-Going to need to rewatch these again and do the exercises to follow along, because I'm realizing that I'm the sort of person where if I don't have a hands on example, the information doesn't stick
-After watching the first tutorial series, I'm bored and want to do more coding
-Learned about Selenium
--Selenium is a program that facilitates the creation of regression testing by recording what actions are taken when on a page and returns those actions in a programming format, which you can copy into your own regression test and will automate the steps you wanna take for each test
--For now, we will just be using Selenium to rip source code from the page, which will then be used for parsing out scholarship information
--Will later on use it for regression testing, as intended, but for now we don't have a web app so that's irrelevant
-Programming task: write a class that takes a URL, goes to the page, returns the page_source
--it works!; unit tests

7/2
-After compy profile died and spent several hours trying (and failing) to recover it, had to rewrite notes and try to set stuff back up
--Some of my user settings for each program are weird now, will try to fix them as they become issues later
-Going to spend rest of the work day watching more Django tutorials, will make sure to do the exercises as they come up!

7/6 Notes:
-URLs in the HTML source code seem to be reliably tagged with <a href="">, so try to make a regex:
--something like <a\shref="(.*?)"
--should make sure that the regex can span multiple lines, have seen examples where the a and href will be on different lines
--investigate this: <link href="" rel="canonical" /> maybe this is how the actual url of the page is displayed?
---This does seem to be the case, another example was <link rel='canonical' href=""/>
---In both pages I've looked at so far, there's only one instance of rel="canonical" so this seems good
---Nevermind, checked another page, didn't have this at all, might be inconsistent
--page url could also be found as <base href="">
-The page title might actually just be between <title></title> xml tags, should look at more pages to find out
--What about <meta property="og:title" or <meta property="og:description
-Description may be under <meta name="description" content=""/>
--Or <meta content="" name="description"/>

-If pulling directly from google results this will need to work differently
--each link in the results is in <a data-href=""> and the title will be between >(title)</a>
--the associated "description" for each result will be in the following <span class="st">blah</span>
--can't actually pull result links from the google source page, it don't work like that
--the source page for google only has information native to that page, the dynamic stuff doesn't exist here

-Wrote class PullPageLinkTitleDescriptionIntoArray, which does about what you'd expect it to do - it pulls the page url, title and description
from the html source code and returns an array containing those items
-The return of this class is then fed into the new class (that I also wrote) called InsertScholarshipArrayIntoDatabase, which connects to the
database and inserts the required thangs where they're supposed to be
--The unit test for this was hella tedious, do not recommend.

7/7 Notes:
-Need to build a class that access the same table as InsertScholarshipArrayIntoDatabase, which pulls out the LinkUrl, calls RipPage to get
the HTML source, and reinserts the HTML source into the LinkBody cell of the same row
-Need to finish writing last week's report for Mike
-Ran into a big issue: the CleanText/HTMLWorker classes are a little too oversimplified. They make the assumption that every page will have some sort of <html></html> and <body></body> sort of things
-The body tags wouldn't be that big of a deal if the pages weren't organized by nice div elements, but they are so fml.
-Will need to rewrite the text cleaning classes so that they actually work on stuff instead of just idealized stuff. Need to figure out a way to just get the text that actually appears on the page
-Learned that SQL is hideously picky. Doesn't like when there's single quotes in the string. Need to create functionality in CleanText that will turn all single quotes ' into '' so it doesn't make SQL mad.

7/8 Notes:
-Finish doing unit tests for PopulateEmptyLinkBodyUsingDatabaseLinkUrl
-Write new unit tests for the new functions in CleanText
-TIL: I'm not very smart
-Task for today: GoogleLeads
-New class (rewrite of PullPageLinkTitleDescriptiontoArray) GoogleLeads
--arguments: SearchTerm
--uses Selenium: goes to google, enters SearchTerm, click, blah blah
--from results page: uses xpath on each result to get link/description/title of each result
--puts link/description/title into array
--appends each of these array into a LeadResults array
--returns LeadResults
-New class: ProcessGoogleLeads
--arguments: LeadResults (from GoogleLeads)
--loops through each LeadArray in LeadResults
--calls InsertGoogleLeads
-New class: InsertGoogleLeads (rewrite of InsertScholarshipArrayIntoDatabase)
--arguments: LeadArray
--basically does the same thing that InsertScholarshipArrayIntoDatabase does, it's just called something different

-if want to be able to use Chrome driver in Selenium, need to add Chrome driver executeable to path, do it later
-Ran into an issue with GoogleLeads pulling out Titles/Links that don't have Descriptions with them, which leads to an uneven number of both lists; which in turn leads to a mismatch when trying to make the arrays
--Difficulty with figuring out how to force xpath to extract only titles/links that have a description(span) as a sibling, but it's being annoying as hell; Don-E will work on figuring out how to do this and will
get back to me on this
--Until we can fix this, implemented a check in GoogleLeads to make sure that there's an even number of titles/links/descriptions pulled out; otherwise break
--we really do need to have a way to enforce that each title/link is with its correct thing or else all hell will break loose if there's ever an instance where there's an even number of all three
but for whatever reason they're not actually all nice and associated with each other in the order that they appear in the page
-When accessing urls through Selenium, it absolutely must always have an http:// or https:// of some sort in front of it or else Selenium's gonna lose its mind. Make sure you do a check so that it will always return this cause otherwise it's bad
--Attach a http:// to all things that don't have it or else


7/9 Notes:
-So we figured out an xpath that will pull out the title, link and description of each result all grouped together, separated by newline
--Can split this string on newline, creates an array of link, title, description
--It's not as nice as the other way, as the title isn't as descriptive for some reason, but it works and is a way to enforce the correct matching
--It also only pulls out the text portion of the url and not the actual complete url. Need to append http:// to those that don't have it already attached at the front or else Selenium won't work
---Need to test if this is an issue with the normal links pulled out.
--Sometimes it doesn't pull out a title at all. fml. Need to add a check so that if it pulls out three elements, element[1] is the title, and if only two elements then there is no title and element[1] is the description
-Just realized that the xpath I was using to pull out the array of links isn't actually returning any links, just link titles, need to fix this asap
--So I found the xpath that gets the link, but it's an attribute and not an element itself, which is making selenium unhappy; need to figure out how to use selenium to pick out attributes
--Fixed it! Change the arrayOfTitles to the xpath originally used for arrayOfLinks, run a loop over each element in arrayOfTitles, element.get_attribute('href'), append that to the new arrayOfLinks, yay
-GoogleLeads seems relatively finished now, will probably encounter some more problems but don't worry about it for now

-Start work on ProcessGoogleLeads
--ProcessGoogleLeads was ridiculously easy? It's four lines... need unit testing
--I really don't want to do unit testing on an database thing with no way to actually delete what I'm going to be putting in there
--Might make a copy of the hrefs database for testing purposes, make an optional argument so I can specify that I want to use the testing databse but otherwise have it do the actual one by default so I don't end up having to change too much of it later.
-Need to make an equivalent of PopulateEmptyLinkBodyUsingDatabaseLinkUrl for the dbo.GoogleLeads
--Wrote class GoogleLeadsUpdateEmptyLinkBody, unit tests, works perfectly

-In the meantime, Don-E wants me to make something similiar to the GoogleLeads classes but that can run on scholarship search sites/scholarship pages




